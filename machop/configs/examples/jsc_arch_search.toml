# basics
model = "jsc-three-linear"
dataset = "jsc"
task = "cls"

max_epochs = 5
batch_size = 256
learning_rate = 1e-2
accelerator = "gpu"
project = "jsc-three-linear"
seed = 30
log_every_n_steps = 5
# load_name = "/home/qizhu/Desktop/Work/mase/mase_output/jsc-three-linear_classification_jsc_2024-02-04/software/training_ckpts/best.ckpt"
# load_type = "pl"

[search.search_space]
name = "graph/arch/redefine_model_arch"

[search.search_space.setup]
by = "name"

[search.search_space.seed.default.config]
# the only choice "NA" is used to indicate that layers are not quantized by default
name = ["NA"]

[search.search_space.seed.linear.config]
# if search.search_space.setup.by = "type", this seed will be used to quantize all torch.nn.Linear/ F.linear
name = ["integer"]
data_in_width = [4, 8]
data_in_frac_width = ["NA"] # "NA" means data_in_frac_width = data_in_width // 2
weight_width = [2, 4, 8]
weight_frac_width = ["NA"]
bias_width = [2, 4, 8]
bias_frac_width = ["NA"]

[search.search_space.seed.seq_blocks_2.config]
# if search.search_space.setup.by = "name", this seed will be used to quantize the mase graph node with name "seq_blocks_2"
name = ["linear"]
channel_multiplier = [1, 2, 4, 8]


[search.search_space.seed.seq_blocks_4.config]
# if search.search_space.setup.by = "name", this seed will be used to quantize the mase graph node with name "seq_blocks_2"
name = ["linear"]
channel_multiplier = [1, 2, 4, 8]

[search.strategy]
name = "optuna"
eval_mode = false

[search.strategy.sw_runner.basic_train]
data_loader = "train_dataloader"
num_samples = 30000
max_epochs = 3
optimizer = "adam"
learning_rate = 1e-3
lr_scheduler = "linear"
num_warmup_steps = 200

[search.strategy.hw_runner.average_bitwidth]
compare_to = 32 # compare to FP32

[search.strategy.setup]
n_jobs = 1
n_trials = 10
timeout = 20000
sampler = "bruteforce"
# sum_scaled_metrics = true # single objective
# direction = "maximize"
sum_scaled_metrics = false # multi objective

[search.strategy.metrics]
loss.scale = 1.0
loss.direction = "minimize"
accuracy.scale = 1.0
accuracy.direction = "maximize"
# average_bitwidth.scale = 0.2
# average_bitwidth.direction = "minimize"
